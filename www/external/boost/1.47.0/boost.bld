#
# LSST build script for boost 
#
# This should work on Linux, Linux64, and DarwinX86
#
set -e
[ -n "$MPICH2_DIR" ] || { echo "mpich2 package is not setup!"; false; }

vstr=`echo $release | sed -e 's/\./_/g'`
tarfile=boost_$vstr.tar.gz

fetch external/boost/$release/$tarfile
unpack_tar_and_enter $tarfile

fetch external/boost/$release/boost-mpi-config.jam
fetch external/boost/$release/darwin.jam

echo ./bootstrap.sh --prefix=$installdir | tee -a $buildlog
./bootstrap.sh --prefix=$installdir >> $buildlog 2>&1 || {
    echo "Boost Bootstrap..."
    tail -20 $buildlog
    echo "$prog: bootstrap failed; see $PWD/$buildlog for details"
    false
}

# prep the configuration file
cp boost-mpi-config.jam tools/build/v2/user-config.jam
cat darwin.jam >> tools/build/v2/tools/darwin.jam

# see how much we can parallelize (on Linux)
para=-j2
[ -e /proc/cpuinfo ] && {
    nproc=`grep '^processor' /proc/cpuinfo | sort -r | head -1 | sed -e 's/^.*: //'`
    ncores=`grep '^cpu cores' /proc/cpuinfo | head -1 | sed -e 's/^.*: //'`
    [ -n "$nproc" -a -n "$ncores" ] && {
        totcores=$(( ($nproc + 1) * $ncores ))
        if [ "$totcores" -gt 4 ]; then
            para=-j6
        elif [ "$totcores" -gt 2 ]; then
            para=-j4
        fi
    }
}

echo ./bjam $para install | tee -a $buildlog
./bjam $para install >> $buildlog 2>&1 || {
    echo "bjam install ..."
    tail -20 $buildlog
    echo "$prog: bjam failed; see $PWD/$buildlog for details"
    false
}

cd $installdir/lib
ls libboost_mpi_* > /dev/null 2>&1 || {
   echo "Failed to build/install mpi libraries"
   false
}

cd $builddir


