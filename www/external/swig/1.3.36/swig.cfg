# -*- python -*-

import lsst.sconsUtils
import os.path
import SCons.Script
import SCons.Scanner

dependencies = {
    "required": ["python"],
}

class Configuration(lsst.sconsUtils.Configuration):

    # NOTE: I have removed the custom swig scanner, because it appears something like
    # it is now built-in with SCons.  Hopefully it's not any worse.

    def __init__(self):
        self.name, self.root = self.parseFilename(__file__)

    def configure(self, conf, packages, check=False, build=True):
        assert(not build)
        lsst.sconsUtils.log.info("Configuring package '%s'." % self.name)
        binDir = os.path.join(self.root, "bin")
        if binDir not in conf.env["ENV"]["PATH"].split():
            conf.env["ENV"]["PATH"] = ":".join(conf.env["ENV"]["PATH"].split(":") + [binDir])
            lsst.sconsUtils.log.info("Added '%s' to PATH for swig." % binDir)
        else:
            lsst.sconsUtils.log.info("'%s' already in PATH for swig." % binDir)
        conf.env['SWIGFLAGS'] = ["-c++", "-python"]
        if check:
            exists = os.path.isfile(os.path.join(binDir, "swig"))
            if not exists:
                lsst.sconsUtils.log.warn("Failed to find swig binary in %s" % binDir)
            return exists
        return True

config = Configuration()
