# -*- python -*-

import lsst.sconsUtils

dependencies = {}

class Configuration(lsst.sconsUtils.Configuration):

    def __init__(self):
        lsst.sconsUtils.Configuration(__file__, libs=[], hasSwigFiles=False, hasDoxygenTag=False,
                                      eupsProduct="cuda_toolkit")
        del self.paths # remind ourselves that we aren't using these variables set by the above __init__

    def configure(self, conf, packages, check=False, build=True):
        conf.env.Tool("cuda_toolkit", toolpath=[self.root])
        conf.env.Append(CCFLAGS = ["-DGPU_BUILD"])
        conf.env.Append(NVCCFLAGS = ["-DGPU_BUILD"])
        conf.env.Append(NVCCFLAGS = ["--ptxas-options=-v"])
        conf.env.Append(NVCCFLAGS = ['-maxrregcount=58'])
        conf.env.Append(NVCCFLAGS = ['-gencode=arch=compute_13,code=\\"sm_13,compute_13\\"'])
        conf.env.Append(NVCCFLAGS = ['-gencode=arch=compute_20,code=\\"sm_20,compute_20\\"'])
        conf.env.Append(SHAREDNVCCFLAGS = ['--compiler-options "-fPIC"'])
        conf.env.Append(CPPPATH = [os.path.join(self.root, "include")])
        conf.env.Append(LIBPATH = [os.path.join(self.root, "lib")])
        conf.env.Append(LIBPATH = [os.path.join(self.root, "lib64")])
        conf.env.Append(LIBS = ["cudart"])
        if check:
            pass # should add some tests to verify that we can find cuda here
        return True

config = Configuration()
